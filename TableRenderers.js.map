{"version":3,"sources":["src/TableRenderers.jsx"],"names":["TableRenderer","props","state","headersRows","stubEntry","stubId","headerEntry","headerAttr","userResponses","settings","showPercentage","headerOptionId","id","forEach","entry","baseScore","stubScore","stubScores","response","value","cells","map","score","Math","round","headerData","headerKeys","missingValues","flatMap","find","record","missingRaw","missingValue","headerId","total","index","finalRowLength","sums","rows","selectedValues","ceil","row","length","optionsLength","push","title","questionId","base","stub","checkedValues","filter","selectedValue","Array","_","html","divider","React","cloneElement","th","colSpan","setState","headers","data","it","currHeaderKey","headerRecord","headerQuestionId","headerOptions","option","text","nextOptionCells","nextHeaderKey","nextHeaderRecord","nextHeaderQuestionId","nextHeaderOptions","j","nextOption","o","updateSpans","prevProps","prevState","multiLevelMode","refreshHeaders","JSON","stringify","pivotData","PivotData","stubFilters","stubValueFilter","headerFilters","headerValueFilter","multiFlatMode","dCopy","Object","assign","dB","key","keys","options","values","filterProp","filterValues","stubData","stubKeys","stubs","headerLastRowIndex","headersSpanSize","currKey","headerKey","i","headerEntries","headerFullEntry","headerOption","getHeaderBase","element","getMultiLevelHeaderBase","stubKey","stubOption","showStubLabel","objs","qLabelRowSpan","calculateCell","calculateMultiLevelCell","calculateMissingValues","calculateMultiLevelMissingValue","Component"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport {PivotData} from './Utilities';\n\n/* eslint-disable react/prop-types */\nclass TableRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      headersRows: [],\n    };\n  }\n\n  calculateCell(stubEntry, stubId, headerEntry, headerAttr) {\n    const {userResponses, settings} = this.props;\n    const {showPercentage} = settings;\n\n    const headerOptionId = headerEntry.id;\n\n    headerEntry[headerAttr].forEach(entry => {\n      entry.baseScore = 0;\n      entry.stubScore = 0;\n\n      if (!entry.stubScores) {\n        entry.stubScores = {};\n      }\n    });\n\n    userResponses.forEach(response => {\n      headerEntry[headerAttr].forEach(entry => {\n        if (!entry.stubScores[headerAttr]) {\n          entry.stubScores[headerAttr] = {};\n        }\n\n        if (response[headerOptionId] === entry.value) {\n          entry.baseScore++;\n\n          if (!entry.stubScores[headerAttr][stubId]) {\n            entry.stubScores[headerAttr][stubId] = 0;\n          }\n\n          if (response[stubId] === stubEntry.value) {\n            entry.stubScore++;\n            entry.stubScores[headerAttr][stubId] += 1;\n          }\n        }\n      });\n    });\n\n    const cells = headerEntry[headerAttr].map(entry => {\n      if (showPercentage) {\n        const score = Math.round((entry.stubScore / entry.baseScore) * 100);\n        return <td>{`${score ? score : 0}%`}</td>;\n      }\n\n      return <td>{entry.stubScore}</td>;\n    });\n\n    return cells;\n  }\n\n  calculateMissingValues(headerData, headerKeys, stubId) {\n    const {settings} = this.props;\n    const {showPercentage} = settings;\n\n    const missingValues = headerKeys.flatMap(headerAttr => {\n      const headerEntry = headerData.find(record =>\n        record[headerAttr] ? record : null\n      );\n\n      return headerEntry[headerAttr].map(entry => {\n        const missingRaw =\n          entry.baseScore - entry.stubScores[headerAttr][stubId];\n\n        if (showPercentage) {\n          const missingValue = Math.round((missingRaw / entry.baseScore) * 100);\n          return missingValue ? missingValue : 0;\n        }\n\n        return missingRaw;\n      });\n    });\n\n    return missingValues;\n  }\n\n  getHeaderBase(headerEntry, headerId) {\n    const {userResponses} = this.props;\n    let total = 0;\n\n    userResponses.forEach(response => {\n      if (response[headerId] === headerEntry.value) {\n        total++;\n      }\n    });\n\n    return total;\n  }\n\n  calculateMultiLevelCell(stubEntry, stubId, index, finalRowLength, sums) {\n    const {userResponses, settings} = this.props;\n    const {showPercentage} = settings;\n    const rows = [...this.state.headersRows];\n    const selectedValues = [];\n\n    rows.forEach(row => {\n      const value =\n        Math.ceil(((index + 1) * row.length) / finalRowLength) %\n        row.optionsLength;\n\n      selectedValues.push({\n        title: row.title,\n        questionId: row.questionId,\n        value: value > 0 ? value : row.optionsLength,\n      });\n    });\n\n    const entry = {\n      baseScore: 0,\n      stubScore: 0,\n      stubScores: {},\n    };\n\n    if (!sums[index]) {\n      sums[index] = {\n        base: 0,\n        stub: 0,\n      };\n    }\n\n    if (sums[index].base > 0) {\n      sums[index].base = 0;\n    }\n    userResponses.forEach(response => {\n      if (!entry.stubScores[index]) {\n        entry.stubScores[index] = {};\n      }\n\n      const checkedValues = selectedValues.filter(\n        selectedValue =>\n          response[selectedValue.questionId] == selectedValue.value\n      );\n\n      if (checkedValues.length === selectedValues.length) {\n        entry.baseScore++;\n        sums[index].base++;\n\n        if (!entry.stubScores[index][stubId]) {\n          entry.stubScores[index][stubId] = 0;\n        }\n\n        if (response[stubId] === stubEntry.value) {\n          if (sums[index].stub >= 0) {\n            sums[index].stub += 1;\n          }\n\n          entry.stubScore++;\n        }\n      }\n    });\n\n    if (showPercentage) {\n      const score = Math.round((entry.stubScore / entry.baseScore) * 100);\n      return <td>{`${score ? score : 0}%`}</td>;\n    }\n\n    return <td>{entry.stubScore}</td>;\n  }\n\n  calculateMultiLevelMissingValue(finalRowLength, sums) {\n    const {settings} = this.props;\n    const {showPercentage} = settings;\n\n    const missingValues = [...Array(finalRowLength)].flatMap((_, index) => {\n      if (sums[index]) {\n        const missingRaw = sums[index].base - sums[index].stub;\n\n        if (showPercentage) {\n          const missingValue = Math.round(\n            (missingRaw / sums[index].base) * 100\n          );\n          return missingValue ? missingValue : 0;\n        }\n\n        return missingRaw;\n      }\n    });\n\n    return missingValues ? missingValues : [];\n  }\n\n  getMultiLevelHeaderBase(index, finalRowLength) {\n    const {userResponses} = this.props;\n    const rows = [...this.state.headersRows];\n    const selectedValues = [];\n\n    let total = 0;\n\n    rows.forEach(row => {\n      const value =\n        Math.ceil(((index + 1) * row.length) / finalRowLength) %\n        row.optionsLength;\n\n      selectedValues.push({\n        title: row.title,\n        questionId: row.questionId,\n        value: value > 0 ? value : row.optionsLength,\n      });\n    });\n\n    userResponses.forEach(response => {\n      const checkedValues = selectedValues.filter(\n        selectedValue =>\n          response[selectedValue.questionId] == selectedValue.value\n      );\n\n      if (checkedValues.length === selectedValues.length) {\n        total++;\n      }\n    });\n\n    return total;\n  }\n\n  updateSpans() {\n    const rows = [...this.state.headersRows];\n\n    rows.forEach(row => {\n      row.html = row.html.map(th => {\n        const divider = rows.length > 1 ? rows[rows.length - 1].length : 1;\n\n        return React.cloneElement(th, {\n          colSpan: divider / row.length,\n        });\n      });\n    });\n\n    this.setState({\n      headersRows: rows,\n    });\n  }\n\n  refreshHeaders() {\n    const rows = [];\n    const headerKeys = this.props.headers;\n    const headerData = this.props.data;\n    let it = 0;\n\n    // insert top row\n    const currHeaderKey = headerKeys[it];\n    const headerRecord = headerData.find(record =>\n      record[currHeaderKey] ? record : null\n    );\n    const headerQuestionId = headerRecord.id;\n    const headerOptions = headerRecord[currHeaderKey];\n\n    rows.push({\n      html: headerOptions.map(option => <th>{option.text}</th>),\n      length: headerOptions.length,\n      optionsLength: headerOptions.length,\n      title: currHeaderKey,\n      questionId: headerQuestionId,\n    });\n\n    while (it < headerKeys.length - 1) {\n      const nextOptionCells = [];\n\n      const nextHeaderKey = headerKeys[it + 1];\n      const nextHeaderRecord = headerData.find(record =>\n        record[nextHeaderKey] ? record : null\n      );\n      const nextHeaderQuestionId = nextHeaderRecord.id;\n      const nextHeaderOptions = nextHeaderRecord[nextHeaderKey];\n\n      for (let j = 0; j < rows[it].length; j++) {\n        nextHeaderOptions.forEach(nextOption => {\n          nextOptionCells.push(<th colSpan=\"1\">{nextOption.text}</th>);\n        });\n      }\n\n      rows.push({\n        html: nextOptionCells.map(o => o),\n        length: nextOptionCells.length,\n        optionsLength: nextHeaderOptions.length,\n        title: nextHeaderKey,\n        questionId: nextHeaderQuestionId,\n      });\n\n      it++;\n    }\n\n    this.setState(\n      {\n        headersRows: rows,\n      },\n      () => {\n        this.updateSpans();\n      }\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.data !== this.props.data ||\n      (this.props.multiLevelMode !== prevProps.multiLevelMode &&\n        !this.props.multiLevelMode)\n    ) {\n      this.setState({\n        headersRows: [],\n      });\n    } else if (\n      this.props.multiLevelMode !== prevProps.multiLevelMode &&\n      this.props.multiLevelMode\n    ) {\n      this.refreshHeaders();\n      return;\n    }\n\n    if (prevProps.headers !== this.props.headers) {\n      let it = 0;\n\n      const rows = [...this.state.headersRows];\n      const headerKeys = this.props.headers;\n      const headerData = this.props.data;\n\n      if (\n        this.props.multiLevelMode &&\n        this.props.headers.length <= prevProps.headers.length &&\n        this.props.headers.length > 0\n      ) {\n        this.refreshHeaders();\n        return;\n      }\n\n      if (headerKeys.length === 1) {\n        const currHeaderKey = headerKeys[it];\n        const headerRecord = headerData.find(record =>\n          record[currHeaderKey] ? record : null\n        );\n        const headerQuestionId = headerRecord.id;\n        const headerOptions = headerRecord[currHeaderKey];\n\n        rows.push({\n          html: headerOptions.map(option => <th>{option.text}</th>),\n          length: headerOptions.length,\n          optionsLength: headerOptions.length,\n          title: currHeaderKey,\n          questionId: headerQuestionId,\n        });\n      } else {\n        it = this.state.headersRows.length - 1;\n      }\n\n      while (it < headerKeys.length - 1) {\n        const nextOptionCells = [];\n\n        const nextHeaderKey = headerKeys[it + 1];\n        const nextHeaderRecord = headerData.find(record =>\n          record[nextHeaderKey] ? record : null\n        );\n        const nextHeaderQuestionId = nextHeaderRecord.id;\n        const nextHeaderOptions = nextHeaderRecord[nextHeaderKey];\n        if (this.state.headersRows[it]) {\n          for (let j = 0; j < this.state.headersRows[it].length; j++) {\n            nextHeaderOptions.forEach(nextOption => {\n              nextOptionCells.push(<th colSpan=\"1\">{nextOption.text}</th>);\n            });\n          }\n\n          rows.push({\n            html: nextOptionCells.map(o => o),\n            length: nextOptionCells.length,\n            optionsLength: nextHeaderOptions.length,\n            title: nextHeaderKey,\n            questionId: nextHeaderQuestionId,\n          });\n        }\n        it++;\n      }\n\n      this.setState({\n        headersRows: rows,\n      });\n    }\n\n    if (\n      JSON.stringify(prevState.headersRows) !==\n        JSON.stringify(this.state.headersRows) &&\n      this.props.headers.length > 1\n    ) {\n      this.updateSpans();\n    }\n  }\n\n  render() {\n    const pivotData = new PivotData(this.props);\n\n    const stubFilters = pivotData.props.stubValueFilter;\n    const headerFilters = pivotData.props.headerValueFilter;\n\n    const multiLevelMode = this.props.multiLevelMode;\n    const multiFlatMode = !multiLevelMode;\n\n    const headerData = pivotData.props.data.map(dB => {\n      const dCopy = Object.assign({}, dB);\n      const key = Object.keys(dCopy)[0];\n      const options = Object.values(dCopy)[0].filter(option => {\n        for (const filterProp in headerFilters) {\n          const filterValues = headerFilters[filterProp];\n          if (filterValues[option.text]) {\n            return false;\n          }\n        }\n        return true;\n      });\n\n      dCopy[key] = options;\n      return dCopy;\n    });\n\n    const stubData = pivotData.props.data.map(dB => {\n      const dCopy = Object.assign({}, dB);\n      const key = Object.keys(dCopy)[0];\n      const options = Object.values(dCopy)[0].filter(option => {\n        for (const filterProp in stubFilters) {\n          const filterValues = stubFilters[filterProp];\n          if (filterValues[option.text]) {\n            return false;\n          }\n        }\n        return true;\n      });\n\n      dCopy[key] = options;\n      return dCopy;\n    });\n\n    const stubKeys = pivotData.props.stubs;\n    const headerKeys = pivotData.props.headers;\n\n    const {headersRows} = this.state;\n    const headerLastRowIndex = headersRows.length - 1;\n    const headersSpanSize =\n      headersRows.length > 0 ? headersRows[headerLastRowIndex].length : 1;\n\n    let currKey = '';\n\n    return (\n      <table className=\"pvtTable\">\n        <thead>\n          {multiFlatMode && (\n            <React.Fragment>\n              <tr>\n                <td colSpan=\"2\"></td>\n                {headerKeys.map((headerKey, i) => {\n                  const headerEntries = headerData.find(record =>\n                    record[headerKey] ? record : null\n                  )[headerKey];\n\n                  return (\n                    <th\n                      className=\"pvtColLabel\"\n                      key={`headerKeyTitle${i}`}\n                      colSpan={headerEntries.length}\n                    >\n                      {headerKey}\n                    </th>\n                  );\n                })}\n              </tr>\n              <tr>\n                <td colSpan=\"2\"></td>\n                {headerKeys.map(headerAttr => {\n                  const headerEntries = headerData.find(record =>\n                    record[headerAttr] ? record : null\n                  )[headerAttr];\n\n                  return headerEntries.map((headerEntry, i) => {\n                    return (\n                      <th className=\"pvtColLabel\" key={`headerKey${i}`}>\n                        {headerEntry.text}\n                      </th>\n                    );\n                  });\n                })}\n              </tr>\n            </React.Fragment>\n          )}\n\n          {multiFlatMode && (\n            <tr>\n              <th colSpan=\"2\">Base</th>\n              {headerKeys.map(headerAttr => {\n                const headerFullEntry = headerData.find(record =>\n                  record[headerAttr] ? record : null\n                );\n                const headerOptions = headerFullEntry[headerAttr];\n\n                return headerOptions.map((headerOption, i) => {\n                  return (\n                    <th className=\"pvtColLabel\" key={`headerKey${i}`}>\n                      {this.getHeaderBase(headerOption, headerFullEntry.id)}\n                    </th>\n                  );\n                });\n              })}\n            </tr>\n          )}\n        </thead>\n\n        <tbody>\n          {multiLevelMode && (\n            <React.Fragment>\n              {headersRows.map(row => (\n                <tr>\n                  <th colSpan=\"2\">{row.title}</th>\n                  {row.html}\n                </tr>\n              ))}\n\n              <tr>\n                <th className=\"pvtRowLabel\" colSpan=\"2\">\n                  Base\n                </th>\n                {headersRows.length > 0 &&\n                  [...Array(headersRows[headerLastRowIndex].length)].map(\n                    (element, index) => {\n                      return (\n                        <th\n                          className=\"pvtColLabel\"\n                          key={`headerKey${index}`}\n                          colSpan=\"1\"\n                        >\n                          {this.getMultiLevelHeaderBase(index, headersSpanSize)}\n                        </th>\n                      );\n                    }\n                  )}\n              </tr>\n            </React.Fragment>\n          )}\n\n          {stubKeys.map((stubKey, i) => {\n            const stubEntry = stubData.find(record =>\n              record[stubKey] ? record : null\n            );\n\n            const sums = {};\n\n            return stubEntry[stubKey].map((stubOption, j) => {\n              let showStubLabel = true;\n\n              if (headerKeys.length > 0)\n                if (j === 0) {\n                  headerKeys.map(headerAttr => {\n                    const headerOptions = headerData.find(record =>\n                      record[headerAttr] ? record : null\n                    );\n\n                    if (headerOptions[headerAttr]) {\n                      headerOptions[headerAttr].forEach(headerOption => {\n                        if (headerOption.stubScores) {\n                          const objs = Object.values(\n                            headerOption.stubScores[headerAttr]\n                          );\n\n                          if (objs.length > 0) {\n                            headerOption.stubScores[headerAttr] = {};\n                          }\n                        }\n                      });\n                    }\n                  });\n                }\n\n              if (currKey !== stubKey) {\n                currKey = stubKey;\n              } else {\n                showStubLabel = false;\n              }\n\n              const qLabelRowSpan = stubEntry[stubKey].length;\n\n              return (\n                <React.Fragment>\n                  <tr key={`stubKeyRow${i}`}>\n                    {showStubLabel && (\n                      <th\n                        key={`stubKeyLabel2${i}-${j}`}\n                        rowSpan={qLabelRowSpan}\n                      >\n                        {stubKey}\n                      </th>\n                    )}\n                    <th key={`stubKeyLabel${i}-${j}`} className=\"pvtRowLabel\">\n                      {stubOption.text}\n                    </th>\n\n                    {multiFlatMode &&\n                      headerKeys.map(headerAttr => {\n                        const headerEntry = headerData.find(record =>\n                          record[headerAttr] ? record : null\n                        );\n\n                        return this.calculateCell(\n                          stubOption,\n                          stubEntry.id,\n                          headerEntry,\n                          headerAttr\n                        );\n                      })}\n\n                    {multiLevelMode &&\n                      headersRows.length > 0 &&\n                      [...Array(headersRows[headerLastRowIndex].length)].map(\n                        (_, index) => {\n                          return this.calculateMultiLevelCell(\n                            stubOption,\n                            stubEntry.id,\n                            index,\n                            headersSpanSize,\n                            sums\n                          );\n                        }\n                      )}\n                  </tr>\n\n                  {multiFlatMode &&\n                    [true].map(_ => {\n                      const missingValues = this.calculateMissingValues(\n                        headerData,\n                        headerKeys,\n                        stubEntry.id\n                      );\n                      if (\n                        j === stubEntry[stubKey].length - 1 &&\n                        missingValues.filter(value => value > 0).length > 0\n                      ) {\n                        return (\n                          <tr>\n                            <td></td>\n                            <th key={`stubKeyLabel2${i}-${j}-${j}`}>\n                              Missing Values\n                            </th>\n                            {missingValues.map(missingValue => {\n                              return (\n                                <td>\n                                  {missingValue}\n                                  {this.props.settings.showPercentage && '%'}\n                                </td>\n                              );\n                            })}\n                          </tr>\n                        );\n                      }\n\n                      return null;\n                    })}\n\n                  {multiLevelMode &&\n                    [true].map(_ => {\n                      if (j === stubEntry[stubKey].length - 1) {\n                        const missingValues = this.calculateMultiLevelMissingValue(\n                          headersSpanSize,\n                          sums\n                        );\n\n                        if (\n                          missingValues.filter(value => value > 0).length > 0\n                        ) {\n                          return (\n                            <tr>\n                              <td></td>\n                              <th key={`stubKeyLabel2${i}-${j}-${j}`}>\n                                Missing Values\n                              </th>\n                              {missingValues.map(missingValue => {\n                                return (\n                                  <td>\n                                    {missingValue}\n                                    {this.props.settings.showPercentage && '%'}\n                                  </td>\n                                );\n                              })}\n                            </tr>\n                          );\n                        }\n                      }\n\n                      return null;\n                    })}\n                </React.Fragment>\n              );\n            });\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default TableRenderer;\n"]}