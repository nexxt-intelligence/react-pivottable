{"version":3,"sources":["src/TableRenderers.jsx"],"names":["TableRenderer","stubEntry","stubId","headerEntry","headerAttr","userResponses","props","headerOptionId","id","forEach","entry","baseScore","stubScore","stubScores","response","value","cells","map","score","Math","round","headerData","headerKeys","missingValues","flatMap","find","record","missingRaw","missingValue","headerId","total","pivotData","PivotData","stubFilters","stubValueFilter","headerFilters","headerValueFilter","data","dCopy","Object","assign","dB","key","keys","options","values","filter","filterProp","filterValues","option","text","stubData","stubKeys","stubs","headers","currKey","headerEntries","i","headerFullEntry","headerOptions","headerOption","getHeaderBase","stubKey","stubOption","j","showStubLabel","objs","length","qLabelRowSpan","calculateCell","calculateMissingValues","React","Component"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,a;;;;;;;;;;;kCACUC,S,EAAWC,M,EAAQC,W,EAAaC,U,EAAY;AAAA,UACjDC,aADiD,GAChC,KAAKC,KAD2B,CACjDD,aADiD;;AAExD,UAAME,iBAAiBJ,YAAYK,EAAnC;;AAEAL,kBAAYC,UAAZ,EAAwBK,OAAxB,CAAgC,iBAAS;AACvCC,cAAMC,SAAN,GAAkB,CAAlB;AACAD,cAAME,SAAN,GAAkB,CAAlB;;AAEA,YAAI,CAACF,MAAMG,UAAX,EAAuB;AACrBH,gBAAMG,UAAN,GAAmB,EAAnB;AACD;AACF,OAPD;;AASAR,oBAAcI,OAAd,CAAsB,oBAAY;AAChCN,oBAAYC,UAAZ,EAAwBK,OAAxB,CAAgC,iBAAS;AACvC,cAAI,CAACC,MAAMG,UAAN,CAAiBT,UAAjB,CAAL,EAAmC;AACjCM,kBAAMG,UAAN,CAAiBT,UAAjB,IAA+B,EAA/B;AACD;;AAED,cAAIU,SAASP,cAAT,MAA6BG,MAAMK,KAAvC,EAA8C;AAC5CL,kBAAMC,SAAN;;AAEA,gBAAI,CAACD,MAAMG,UAAN,CAAiBT,UAAjB,EAA6BF,MAA7B,CAAL,EAA2C;AACzCQ,oBAAMG,UAAN,CAAiBT,UAAjB,EAA6BF,MAA7B,IAAuC,CAAvC;AACD;;AAED,gBAAIY,SAASZ,MAAT,MAAqBD,UAAUc,KAAnC,EAA0C;AACxCL,oBAAME,SAAN;AACAF,oBAAMG,UAAN,CAAiBT,UAAjB,EAA6BF,MAA7B,KAAwC,CAAxC;AACD;AACF;AACF,SAjBD;AAkBD,OAnBD;;AAqBA,UAAMc,QAAQb,YAAYC,UAAZ,EAAwBa,GAAxB,CAA4B,iBAAS;AACjD,YAAMC,QAAQC,KAAKC,KAAL,CAAYV,MAAME,SAAN,GAAkBF,MAAMC,SAAzB,GAAsC,GAAjD,CAAd;;AAEA,eAAO;AAAA;AAAA;AAAA,WAAQO,QAAQA,KAAR,GAAgB,CAAxB;AAAA,SAAP;AACD,OAJa,CAAd;;AAMA,aAAOF,KAAP;AACD;;;2CAEsBK,U,EAAYC,U,EAAYpB,M,EAAQ;AACrD,UAAMqB,gBAAgBD,WAAWE,OAAX,CAAmB,sBAAc;AACrD,YAAMrB,cAAckB,WAAWI,IAAX,CAAgB;AAAA,iBAClCC,OAAOtB,UAAP,IAAqBsB,MAArB,GAA8B,IADI;AAAA,SAAhB,CAApB;;AAIA,eAAOvB,YAAYC,UAAZ,EAAwBa,GAAxB,CAA4B,iBAAS;AAC1C,cAAMU,aACJjB,MAAMC,SAAN,GAAkBD,MAAMG,UAAN,CAAiBT,UAAjB,EAA6BF,MAA7B,CADpB;AAEA,cAAM0B,eAAeT,KAAKC,KAAL,CAAYO,aAAajB,MAAMC,SAApB,GAAiC,GAA5C,CAArB;;AAEA,iBAAOiB,eAAeA,YAAf,GAA8B,CAArC;AACD,SANM,CAAP;AAOD,OAZqB,CAAtB;;AAcA,aAAOL,aAAP;AACD;;;kCAEapB,W,EAAa0B,Q,EAAU;AAAA,UAC5BxB,aAD4B,GACX,KAAKC,KADM,CAC5BD,aAD4B;;AAEnC,UAAIyB,QAAQ,CAAZ;;AAEAzB,oBAAcI,OAAd,CAAsB,oBAAY;AAChC,YAAIK,SAASe,QAAT,MAAuB1B,YAAYY,KAAvC,EAA8C;AAC5Ce;AACD;AACF,OAJD;;AAMA,aAAOA,KAAP;AACD;;;6BAEQ;AAAA;;AACP,UAAMC,YAAY,IAAIC,oBAAJ,CAAc,KAAK1B,KAAnB,CAAlB;;AAEA,UAAM2B,cAAcF,UAAUzB,KAAV,CAAgB4B,eAApC;AACA,UAAMC,gBAAgBJ,UAAUzB,KAAV,CAAgB8B,iBAAtC;;AAEA,UAAMf,aAAaU,UAAUzB,KAAV,CAAgB+B,IAAhB,CAAqBpB,GAArB,CAAyB,cAAM;AAChD,YAAMqB,QAAQC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,EAAlB,CAAd;AACA,YAAMC,MAAMH,OAAOI,IAAP,CAAYL,KAAZ,EAAmB,CAAnB,CAAZ;AACA,YAAMM,UAAUL,OAAOM,MAAP,CAAcP,KAAd,EAAqB,CAArB,EAAwBQ,MAAxB,CAA+B,kBAAU;AACvD,eAAK,IAAMC,UAAX,IAAyBZ,aAAzB,EAAwC;AACtC,gBAAMa,eAAeb,cAAcY,UAAd,CAArB;AACA,gBAAIC,aAAaC,OAAOC,IAApB,CAAJ,EAA+B;AAC7B,qBAAO,KAAP;AACD;AACF;AACD,iBAAO,IAAP;AACD,SARe,CAAhB;;AAUAZ,cAAMI,GAAN,IAAaE,OAAb;AACA,eAAON,KAAP;AACD,OAfkB,CAAnB;;AAiBA,UAAMa,WAAWpB,UAAUzB,KAAV,CAAgB+B,IAAhB,CAAqBpB,GAArB,CAAyB,cAAM;AAC9C,YAAMqB,QAAQC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,EAAlB,CAAd;AACA,YAAMC,MAAMH,OAAOI,IAAP,CAAYL,KAAZ,EAAmB,CAAnB,CAAZ;AACA,YAAMM,UAAUL,OAAOM,MAAP,CAAcP,KAAd,EAAqB,CAArB,EAAwBQ,MAAxB,CAA+B,kBAAU;AACvD,eAAK,IAAMC,UAAX,IAAyBd,WAAzB,EAAsC;AACpC,gBAAMe,eAAef,YAAYc,UAAZ,CAArB;AACA,gBAAIC,aAAaC,OAAOC,IAApB,CAAJ,EAA+B;AAC7B,qBAAO,KAAP;AACD;AACF;AACD,iBAAO,IAAP;AACD,SARe,CAAhB;;AAUAZ,cAAMI,GAAN,IAAaE,OAAb;AACA,eAAON,KAAP;AACD,OAfgB,CAAjB;;AAiBA,UAAMc,WAAWrB,UAAUzB,KAAV,CAAgB+C,KAAjC;AACA,UAAM/B,aAAaS,UAAUzB,KAAV,CAAgBgD,OAAnC;AACA,UAAIC,UAAU,EAAd;;AAEA,aACE;AAAA;AAAA,UAAO,WAAU,UAAjB;AACE;AAAA;AAAA;AACE;AAAA;AAAA;AACE,kDAAI,SAAQ,GAAZ,GADF;AAEGjC,uBAAWL,GAAX,CAAe,sBAAc;AAC5B,kBAAMuC,gBAAgBnC,WAAWI,IAAX,CAAgB;AAAA,uBACpCC,OAAOtB,UAAP,IAAqBsB,MAArB,GAA8B,IADM;AAAA,eAAhB,EAEpBtB,UAFoB,CAAtB;AAGA,qBAAOoD,cAAcvC,GAAd,CAAkB,UAACd,WAAD,EAAcsD,CAAd,EAAoB;AAC3C,uBACE;AAAA;AAAA,oBAAI,WAAU,aAAd,EAA4B,mBAAiBA,CAA7C;AACGtD,8BAAY+C;AADf,iBADF;AAKD,eANM,CAAP;AAOD,aAXA;AAFH,WADF;AAgBE;AAAA;AAAA;AACE;AAAA;AAAA,gBAAI,SAAQ,GAAZ;AAAA;AAAA,aADF;AAEG5B,uBAAWL,GAAX,CAAe,sBAAc;AAC5B,kBAAMyC,kBAAkBrC,WAAWI,IAAX,CAAgB;AAAA,uBACtCC,OAAOtB,UAAP,IAAqBsB,MAArB,GAA8B,IADQ;AAAA,eAAhB,CAAxB;AAGA,kBAAMiC,gBAAgBD,gBAAgBtD,UAAhB,CAAtB;;AAEA,qBAAOuD,cAAc1C,GAAd,CAAkB,UAAC2C,YAAD,EAAeH,CAAf,EAAqB;AAC5C,uBACE;AAAA;AAAA,oBAAI,WAAU,aAAd,EAA4B,mBAAiBA,CAA7C;AACG,yBAAKI,aAAL,CAAmBD,YAAnB,EAAiCF,gBAAgBlD,EAAjD;AADH,iBADF;AAKD,eANM,CAAP;AAOD,aAbA;AAFH;AAhBF,SADF;AAoCE;AAAA;AAAA;AACG4C,mBAASnC,GAAT,CAAa,UAAC6C,OAAD,EAAUL,CAAV,EAAgB;AAC5B,gBAAMxD,YAAYkD,SAAS1B,IAAT,CAAc;AAAA,qBAC9BC,OAAOoC,OAAP,IAAkBpC,MAAlB,GAA2B,IADG;AAAA,aAAd,CAAlB;;AAIA,mBAAOzB,UAAU6D,OAAV,EAAmB7C,GAAnB,CAAuB,UAAC8C,UAAD,EAAaC,CAAb,EAAmB;AAC/C,kBAAIC,gBAAgB,IAApB;;AAEA,kBAAIR,MAAM,CAAV,EAAa;AACXnC,2BAAWL,GAAX,CAAe,sBAAc;AAC3B,sBAAM0C,gBAAgBtC,WAAWI,IAAX,CAAgB;AAAA,2BACpCC,OAAOtB,UAAP,IAAqBsB,MAArB,GAA8B,IADM;AAAA,mBAAhB,CAAtB;;AAIA,sBAAIiC,cAAcvD,UAAd,CAAJ,EAA+B;AAC7BuD,kCAAcvD,UAAd,EAA0BK,OAA1B,CAAkC,wBAAgB;AAChD,0BAAImD,aAAa/C,UAAjB,EAA6B;AAC3B,4BAAMqD,OAAO3B,OAAOM,MAAP,CACXe,aAAa/C,UAAb,CAAwBT,UAAxB,CADW,CAAb;;AAIA,4BAAI8D,KAAKC,MAAL,GAAc,CAAlB,EAAqB;AACnBP,uCAAa/C,UAAb,CAAwBT,UAAxB,IAAsC,EAAtC;AACD;AACF;AACF,qBAVD;AAWD;AACF,iBAlBD;AAmBD;;AAED,kBAAImD,YAAYO,OAAhB,EAAyB;AACvBP,0BAAUO,OAAV;AACD,eAFD,MAEO;AACLG,gCAAgB,KAAhB;AACD;;AAED,kBAAMG,gBAAgBnE,UAAU6D,OAAV,EAAmBK,MAAzC;;AAEA,qBACE;AAAC,+BAAD,CAAO,QAAP;AAAA;AACE;AAAA;AAAA,oBAAI,oBAAkBV,CAAtB;AACGQ,mCACC;AAAA;AAAA;AACE,6CAAqBR,CAArB,SAA0BO,CAD5B;AAEE,+BAASI;AAFX;AAIGN;AAJH,mBAFJ;AASE;AAAA;AAAA,sBAAI,sBAAoBL,CAApB,SAAyBO,CAA7B,EAAkC,WAAU,aAA5C;AACGD,+BAAWb;AADd,mBATF;AAYG5B,6BAAWL,GAAX,CAAe,sBAAc;AAC5B,wBAAMd,cAAckB,WAAWI,IAAX,CAAgB;AAAA,6BAClCC,OAAOtB,UAAP,IAAqBsB,MAArB,GAA8B,IADI;AAAA,qBAAhB,CAApB;;AAIA,2BAAO,OAAK2C,aAAL,CACLN,UADK,EAEL9D,UAAUO,EAFL,EAGLL,WAHK,EAILC,UAJK,CAAP;AAMD,mBAXA;AAZH,iBADF;AA0BG,iBAAC,IAAD,EAAOa,GAAP,CAAW,aAAK;AACf,sBAAMM,gBAAgB,OAAK+C,sBAAL,CACpBjD,UADoB,EAEpBC,UAFoB,EAGpBrB,UAAUO,EAHU,CAAtB;AAKA,sBACEwD,MAAM/D,UAAU6D,OAAV,EAAmBK,MAAnB,GAA4B,CAAlC,IACA5C,cAAcuB,MAAd,CAAqB;AAAA,2BAAS/B,QAAQ,CAAjB;AAAA,mBAArB,EAAyCoD,MAAzC,GAAkD,CAFpD,EAGE;AACA,2BACE;AAAA;AAAA;AACE,+DADF;AAEE;AAAA;AAAA,0BAAI,uBAAqBV,CAArB,SAA0BO,CAA1B,SAA+BA,CAAnC;AAAA;AAAA,uBAFF;AAKGzC,oCAAcN,GAAd,CAAkB,wBAAgB;AACjC,+BAAO;AAAA;AAAA;AAAKW,sCAAL;AAAA;AAAA,yBAAP;AACD,uBAFA;AALH,qBADF;AAWD;;AAED,yBAAO,IAAP;AACD,iBAxBA;AA1BH,eADF;AAsDD,aAvFM,CAAP;AAwFD,WA7FA;AADH;AApCF,OADF;AAuID;;;;EA9PyB2C,gBAAMC,S;;kBAiQnBxE,a","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {PivotData} from './Utilities';\n\nclass TableRenderer extends React.Component {\n  calculateCell(stubEntry, stubId, headerEntry, headerAttr) {\n    const {userResponses} = this.props;\n    const headerOptionId = headerEntry.id;\n\n    headerEntry[headerAttr].forEach(entry => {\n      entry.baseScore = 0;\n      entry.stubScore = 0;\n\n      if (!entry.stubScores) {\n        entry.stubScores = {};\n      }\n    });\n\n    userResponses.forEach(response => {\n      headerEntry[headerAttr].forEach(entry => {\n        if (!entry.stubScores[headerAttr]) {\n          entry.stubScores[headerAttr] = {};\n        }\n\n        if (response[headerOptionId] === entry.value) {\n          entry.baseScore++;\n\n          if (!entry.stubScores[headerAttr][stubId]) {\n            entry.stubScores[headerAttr][stubId] = 0;\n          }\n\n          if (response[stubId] === stubEntry.value) {\n            entry.stubScore++;\n            entry.stubScores[headerAttr][stubId] += 1;\n          }\n        }\n      });\n    });\n\n    const cells = headerEntry[headerAttr].map(entry => {\n      const score = Math.round((entry.stubScore / entry.baseScore) * 100);\n\n      return <td>{`${score ? score : 0}%`}</td>;\n    });\n\n    return cells;\n  }\n\n  calculateMissingValues(headerData, headerKeys, stubId) {\n    const missingValues = headerKeys.flatMap(headerAttr => {\n      const headerEntry = headerData.find(record =>\n        record[headerAttr] ? record : null\n      );\n\n      return headerEntry[headerAttr].map(entry => {\n        const missingRaw =\n          entry.baseScore - entry.stubScores[headerAttr][stubId];\n        const missingValue = Math.round((missingRaw / entry.baseScore) * 100);\n\n        return missingValue ? missingValue : 0;\n      });\n    });\n\n    return missingValues;\n  }\n\n  getHeaderBase(headerEntry, headerId) {\n    const {userResponses} = this.props;\n    let total = 0;\n\n    userResponses.forEach(response => {\n      if (response[headerId] === headerEntry.value) {\n        total++;\n      }\n    });\n\n    return total;\n  }\n\n  render() {\n    const pivotData = new PivotData(this.props);\n\n    const stubFilters = pivotData.props.stubValueFilter;\n    const headerFilters = pivotData.props.headerValueFilter;\n\n    const headerData = pivotData.props.data.map(dB => {\n      const dCopy = Object.assign({}, dB);\n      const key = Object.keys(dCopy)[0];\n      const options = Object.values(dCopy)[0].filter(option => {\n        for (const filterProp in headerFilters) {\n          const filterValues = headerFilters[filterProp];\n          if (filterValues[option.text]) {\n            return false;\n          }\n        }\n        return true;\n      });\n\n      dCopy[key] = options;\n      return dCopy;\n    });\n\n    const stubData = pivotData.props.data.map(dB => {\n      const dCopy = Object.assign({}, dB);\n      const key = Object.keys(dCopy)[0];\n      const options = Object.values(dCopy)[0].filter(option => {\n        for (const filterProp in stubFilters) {\n          const filterValues = stubFilters[filterProp];\n          if (filterValues[option.text]) {\n            return false;\n          }\n        }\n        return true;\n      });\n\n      dCopy[key] = options;\n      return dCopy;\n    });\n\n    const stubKeys = pivotData.props.stubs;\n    const headerKeys = pivotData.props.headers;\n    let currKey = '';\n\n    return (\n      <table className=\"pvtTable\">\n        <thead>\n          <tr>\n            <td colSpan=\"2\"></td>\n            {headerKeys.map(headerAttr => {\n              const headerEntries = headerData.find(record =>\n                record[headerAttr] ? record : null\n              )[headerAttr];\n              return headerEntries.map((headerEntry, i) => {\n                return (\n                  <th className=\"pvtColLabel\" key={`headerKey${i}`}>\n                    {headerEntry.text}\n                  </th>\n                );\n              });\n            })}\n          </tr>\n          <tr>\n            <th colSpan=\"2\">Base</th>\n            {headerKeys.map(headerAttr => {\n              const headerFullEntry = headerData.find(record =>\n                record[headerAttr] ? record : null\n              );\n              const headerOptions = headerFullEntry[headerAttr];\n\n              return headerOptions.map((headerOption, i) => {\n                return (\n                  <th className=\"pvtColLabel\" key={`headerKey${i}`}>\n                    {this.getHeaderBase(headerOption, headerFullEntry.id)}\n                  </th>\n                );\n              });\n            })}\n          </tr>\n        </thead>\n\n        <tbody>\n          {stubKeys.map((stubKey, i) => {\n            const stubEntry = stubData.find(record =>\n              record[stubKey] ? record : null\n            );\n\n            return stubEntry[stubKey].map((stubOption, j) => {\n              let showStubLabel = true;\n\n              if (i === 0) {\n                headerKeys.map(headerAttr => {\n                  const headerOptions = headerData.find(record =>\n                    record[headerAttr] ? record : null\n                  );\n\n                  if (headerOptions[headerAttr]) {\n                    headerOptions[headerAttr].forEach(headerOption => {\n                      if (headerOption.stubScores) {\n                        const objs = Object.values(\n                          headerOption.stubScores[headerAttr]\n                        );\n\n                        if (objs.length > 0) {\n                          headerOption.stubScores[headerAttr] = {};\n                        }\n                      }\n                    });\n                  }\n                });\n              }\n\n              if (currKey !== stubKey) {\n                currKey = stubKey;\n              } else {\n                showStubLabel = false;\n              }\n\n              const qLabelRowSpan = stubEntry[stubKey].length;\n\n              return (\n                <React.Fragment>\n                  <tr key={`stubKeyRow${i}`}>\n                    {showStubLabel && (\n                      <th\n                        key={`stubKeyLabel2${i}-${j}`}\n                        rowSpan={qLabelRowSpan}\n                      >\n                        {stubKey}\n                      </th>\n                    )}\n                    <th key={`stubKeyLabel${i}-${j}`} className=\"pvtRowLabel\">\n                      {stubOption.text}\n                    </th>\n                    {headerKeys.map(headerAttr => {\n                      const headerEntry = headerData.find(record =>\n                        record[headerAttr] ? record : null\n                      );\n\n                      return this.calculateCell(\n                        stubOption,\n                        stubEntry.id,\n                        headerEntry,\n                        headerAttr\n                      );\n                    })}\n                  </tr>\n                  {[true].map(_ => {\n                    const missingValues = this.calculateMissingValues(\n                      headerData,\n                      headerKeys,\n                      stubEntry.id\n                    );\n                    if (\n                      j === stubEntry[stubKey].length - 1 &&\n                      missingValues.filter(value => value > 0).length > 0\n                    ) {\n                      return (\n                        <tr>\n                          <td></td>\n                          <th key={`stubKeyLabel2${i}-${j}-${j}`}>\n                            Missing Values\n                          </th>\n                          {missingValues.map(missingValue => {\n                            return <td>{missingValue}%</td>;\n                          })}\n                        </tr>\n                      );\n                    }\n\n                    return null;\n                  })}\n                </React.Fragment>\n              );\n            });\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default TableRenderer;\n"]}